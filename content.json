{"meta":{"title":"Java界的小学生","subtitle":null,"description":"业精于勤荒于嬉，行成于思毁于随","author":"Liyuan Wang","url":"http://yoursite.com"},"pages":[{"title":"","date":"2017-01-15T14:46:14.819Z","updated":"2017-01-15T13:45:55.854Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""},{"title":"","date":"2017-01-16T01:23:44.701Z","updated":"2017-01-16T01:22:24.770Z","comments":true,"path":"baidu_verify_S0FhK5Wvcn.html","permalink":"http://yoursite.com/baidu_verify_S0FhK5Wvcn.html","excerpt":"","text":"S0FhK5Wvcn"},{"title":"分类","date":"2017-01-15T13:30:38.000Z","updated":"2017-01-15T13:32:43.032Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2017-01-02T15:24:55.000Z","updated":"2017-01-02T15:24:55.342Z","comments":true,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"","date":"2017-01-16T02:21:06.301Z","updated":"2017-01-16T02:21:06.301Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"业精于勤荒于嬉，行成于思毁于随"},{"title":"标签","date":"2017-01-15T13:30:38.000Z","updated":"2017-01-15T13:33:53.826Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java 编码规范","slug":"Java-Code-Style","date":"2017-01-08T15:33:16.000Z","updated":"2017-01-15T14:54:17.123Z","comments":true,"path":"2017/01/08/Java-Code-Style/","link":"","permalink":"http://yoursite.com/2017/01/08/Java-Code-Style/","excerpt":"Java编码规范，不仅是编码格式美观的问题和可读性的问题，也是一个程序员编程风格的体现。良好的编码规范可以治疗强迫症晚期程序员以及代码洁癖晚期程序员。最近写python和shell比较多，反而Java写的稍微少一些，渐渐的感觉自己的编码风格有些混乱。几种编程语言编码风格混用，Java变量命名开始加下划线，python用驼峰式……等编码风格，自己都先恶心了。所以整理一下几种编码规范，给自己立个Flag。","text":"Java编码规范，不仅是编码格式美观的问题和可读性的问题，也是一个程序员编程风格的体现。良好的编码规范可以治疗强迫症晚期程序员以及代码洁癖晚期程序员。最近写python和shell比较多，反而Java写的稍微少一些，渐渐的感觉自己的编码风格有些混乱。几种编程语言编码风格混用，Java变量命名开始加下划线，python用驼峰式……等编码风格，自己都先恶心了。所以整理一下几种编码规范，给自己立个Flag。 一. 命名规范 包名规范 全部小写，连续单词只是简单连接在一起不使用下划线 前缀为域名反转，com.sun.eng 类名规范 UpperCamelCase风格， 如HashMap 一般为名词或名词短语 尽量写全名，避免简写 方法名规范 lowerCamelCase风格，不要用下划线，方法名通常是动词或动词短语 常量名 常量名命名模式为CONSTANT_CASE，全部字母大写，用下划线分隔单词，如WEB_URL=”*“ 变量名 lowerCamelCase风格，即length,myWidth Variable names should be short yet meaningful 二. 注释规范Java算是一种比较规范的语言，尤其是对于程序化编程来说，可能注释的作用没那么明显。但是对于算法类方法编程，注释可能是解释算法最为重要的一部分，良好的注释是一个程序员功底的体现。Comments should be used to give overviews of code and provide additional information that is not readily available in the code itself。The frequency of comments sometimes reflects poor quality of code. When you feel compelled to add a comment, consider rewriting the code to make it clearer。 Java两类注释 一类是常规注释，类似于C,C++中都存在的注释，常用的注释方法为//,/ …/ 另外一类是java doc 注释，应用javadoc tool 工具这类注释可以生成html文档，是java特有的注释方法，以/* …/生成注释常规注释 块注释 Block comments are used to provide descriptions of files, methods, data structures and algorithms. Block comments may be used at the beginning of each file and before each method。 多行注释使用块注释，而不是画一堆奇奇怪怪的*****画一个方框1234567/* *块注释， *从JDK源码风格来看，一般public method的注释采用\"/**。。。*/\"风格的java doc注释 *而相应的private，protected的方法注释采用这种块注释方法 *从HashMap源码来看，块注释也一般放在类内部开始的地方用来解释算法原理 *一般不用于代码块内部注释 */ 单行注释 当行注释一般用于代码块中的注释 同时也用来对类方法分类划分123/* ---------------- Public operations -------------- */......./* ----------------Private CRUD --------------------*/ //注释 //单行注释 与 /单行注释/ ，一般都用于单行注释 尽管orcacle 中不建议使用//来进行多行注释，但是从JDK源码来看，还是有用//来进行多行注释而Google Java Style Guide也不建议应用//来进行多行注释 //注释最重要的作用是将无用的代码注释掉，而不要用/**/的方式注释Demo12345678910111213141516171819202122/***@author ...*/public class JavaCodeStyleTest&#123; private int len; /*短注释，解释该类field*/ /*长注释，来解释下面这个复杂的field*/ private int complexField; /** * 为每个public method写java doc类的注释 * 这个一般用IDE自动生成好一些 * 写明参数和返回值，@param @return */ public void sayHello()&#123; //解释下面的代码 System.out.println(\"HELLO WORLD\"); &#125; // public void oldCode()&#123; // // &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"Code Style","slug":"Code-Style","permalink":"http://yoursite.com/tags/Code-Style/"}]}]}